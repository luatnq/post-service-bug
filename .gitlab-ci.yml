stages:
  - build
  - publish
  - release
  - deploy

variables:
  SERVICE_NAME: post-service

build:
  tags:
    - social
  stage: build
  variables:
    MAVEN_OPTS: -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
  image:
    name: maven:3.6-openjdk-11
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## and email.
    ##
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "huucanh.aibles@gmail.com"
    - git config --global user.name "GitLab CI/CD"
    - git submodule sync --recursive
    - git submodule update --init --recursive
  cache:
    key:
      files:
        - post-service/pom.xml
    paths:
      - .m2/repository
  script:
    - mvn clean package
    - nohup post-service/target/*.jar &
  only:
    - develop
    - master
  artifacts:
    paths:
      - post-service/target/*.jar
    expire_in: 3 days
publish:
  tags:
    - social
  stage: publish
  before_script:
    - docker version
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  dependencies:
    - build
  only:
    - develop
    - master

# release-tag:
#   tags:
#     - social
#   variables:
#     GIT_STRATEGY: none
#   stage: release
#   except:
#     - develop
#   before_script:
#     - docker version
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
#     - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

release-latest:
  tags:
    - social
  variables:
    GIT_STRATEGY: none
  stage: release
  only:
    - develop
  before_script:
    - docker version
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
deploy:
  tags:
    - social
  stage: deploy
  variables:
    GIT_STRATEGY: none
  only:
    - develop
  before_script:
    - apk update && apk add openssh-client bash
  script:
    # chạy ssh-agent tương ứng với Gitlab Runner hiện tại
    - eval $(ssh-agent -s)

    # thêm nội dung của biến SSH_PRIVATE_KEY vào agent store
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'

    # tạo folder ~/.ssh
    - mkdir -p ~/.ssh

    # Scan lấy SSH Host key cho địa chỉ IP server
    # Được kết quả bao nhiêu thì thêm vào file known_hosts
    - ssh-keyscan -H $SSH_SERVER_IP >> ~/.ssh/known_hosts

    # Sửa lại quyền của file known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Thực hiện SSH vào server, login vào Registry, chuyển tới folder project
    # Down project, pull image về, up project và xoá đi image cũ
    - >
      ssh $SSH_USER@$SSH_SERVER_IP
      "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};
      cd ${PATH_TO_PROJECT};
      docker-compose up -d;
      docker image prune -f;"

# publish:
#   tags:
#     - social
#   stage: publish
#   image:
#     name: docker:19.03.12
#   before_script:
#     - echo $GOOGLE_CLOUD_ACCOUNT | docker login -u _json_key --password-stdin https://us.gcr.io
#   script:
#     - docker pull $GCR_REGISTRY/$SERVICE_NAME:latest || true
#     - docker build --cache-from $GCR_REGISTRY/$SERVICE_NAME:latest -t $GCR_REGISTRY/$SERVICE_NAME:$CI_COMMIT_SHA -t $GCR_REGISTRY/$SERVICE_NAME:latest .
#     - docker push $GCR_REGISTRY/$SERVICE_NAME:$CI_COMMIT_SHA
#     - docker push $GCR_REGISTRY/$SERVICE_NAME:latest
#   dependencies:
#     - build
#   only:
#     - develop
#     - master

# deploy-dev:
#   tags:
#     - social
#   stage: deploy-dev
#   before_script:
#     - apk add --no-cache git curl bash
#     - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
#     - mv kustomize /usr/local/bin/
#     - git remote set-url origin https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/aibles-social-backend/$SERVICE_NAME.git
#     - git config --global user.email "huucanh.aibles@gmail.com"
#     - git config --global user.name "GitLab CI/CD"
#   script:
#     - git checkout -B develop
#     - cd deployment/dev
#     - kustomize edit set image $GCR_REGISTRY/$SERVICE_NAME:$CI_COMMIT_SHA
#     - cat kustomization.yaml
#     - git commit -am '[skip ci] DEV image update'
#     - git push origin develop
#   only:
#     - develop

# deploy-prod:
#   tags:
#     - social
#   stage: deploy-prod
#   before_script:
#     - apk add --no-cache git curl bash
#     - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
#     - mv kustomize /usr/local/bin/
#     - git remote set-url origin https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/aibles-social-backend/$SERVICE_NAME.git
#     - git config --global user.email "huucanh.aibles@gmail.com"
#     - git config --global user.name "GitLab CI/CD"
#   script:
#     - git checkout -B master
#     - git pull origin master
#     - cd deployment/prod
#     - kustomize edit set image $GCR_REGISTRY/$SERVICE_NAME:$CI_COMMIT_SHA
#     - cat kustomization.yaml
#     - git commit -am '[skip ci] PROD image update'
#     - git push origin master
#   only:
#     - master
#   when: manual
